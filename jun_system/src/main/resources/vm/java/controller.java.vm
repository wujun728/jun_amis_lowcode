package ${packageName}.${businessName}.controller;

import javax.servlet.http.HttpServletRequest;
import java.util.List;
import org.apache.shiro.authz.annotation.RequiresPermissions;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.ruoyi.common.utils.RequestUtil;
import com.ruoyi.common.utils.poi.ExcelUtilx;
import com.ruoyi.framework.aspectj.lang.annotation.Log;
import com.ruoyi.framework.aspectj.lang.enums.BusinessType;
import ${packageName}.${businessName}.service.${ClassName}Service;
import com.ruoyi.framework.web.controller.BaseController;
import com.ruoyi.framework.web.domain.AjaxResult;
#if($table.crud)
import com.ruoyi.framework.web.page.TableDataInfo;
#elseif($table.tree)
import com.ruoyi.common.utils.StringUtils;
import com.ruoyi.framework.web.domain.Ztree;
#end

/**
 * ${functionName}控制类
 * @author ${author}
 * @date ${datetime}
 */
@Controller
@RequestMapping("/${moduleName}/${businessName}")
public class ${ClassName}Controller extends BaseController
{
    private String prefix = "${moduleName}/${businessName}";

    @Autowired
    private ${ClassName}Service ${className}Service;

    @RequiresPermissions("${permissionPrefix}:view")
    @GetMapping()
    public String ${businessName}() {
        return prefix + "/${businessName}";
    }

#if($table.crud)
    /**
     * 查询${functionName}列表
     */
    @RequiresPermissions("${permissionPrefix}:list")
    @PostMapping("/list")
    @ResponseBody
    public TableDataInfo list(HttpServletRequest request) {
        return ${className}Service.select${ClassName}List(request, true);
    }
#elseif($table.tree)
    /**
     * 查询${functionName}树列表
     */
    @RequiresPermissions("${permissionPrefix}:list")
    @PostMapping("/list")
    @ResponseBody
    public List<Map<String, Object>> list(HttpServletRequest request) {
        return ${className}Service.select${ClassName}List(request);
    }
#end

    /**
     * 导出${functionName}数据
     */
    @RequiresPermissions("${permissionPrefix}:export")
    @Log(title = "${functionName}", businessType = BusinessType.EXPORT)
    @PostMapping("/export")
    @ResponseBody
    public AjaxResult export(HttpServletRequest request) {
        //定义表头
        Map<String, String> headers = new LinkedHashMap<String, String>();
        //导出字段
#foreach($column in $columns)
#if($column.export)
#set($parentheseIndex=$column.columnComment.indexOf("（"))
#if($parentheseIndex != -1)
#set($comment=$column.columnComment.substring(0, $parentheseIndex))
#else
#set($comment=$column.columnComment)
#end
        headers.put("${column.columnName}", "$comment");
#end
#end

        //查询数据集合
        List<?> dataList = ${className}Service.select${ClassName}List(request, false).getRows();
        //导出Excel
        return ExcelUtilx.exportExcel(headers, dataList, "${functionName}数据");
    }

#if($table.crud)
    /**
     * 新增${functionName}
     */
    @GetMapping("/add")
    public String add() {
        return prefix + "/add";
    }
#elseif($table.tree)
    /**
     * 新增${functionName}
     */
    @GetMapping(value = { "/add/{${pkColumn.columnName}}", "/add/" })
    public String add(@PathVariable(value = "${pkColumn.columnName}", required = false) String ${pkColumn.columnName}, ModelMap mmap) {
        if (StringUtils.isNotNull(${pkColumn.columnName})) {
            mmap.put("${className}", ${className}Service.select${ClassName}ById(${pkColumn.columnName}));
        }
        return prefix + "/add";
    }
#end

    /**
     * 修改${functionName}
     */
    @GetMapping("/edit/{${pkColumn.columnName}}")
    public String edit(@PathVariable("${pkColumn.columnName}") String ${pkColumn.columnName}, ModelMap mmap) {
        mmap.put("${className}", ${className}Service.select${ClassName}ById(${pkColumn.columnName}));
        return prefix + "/edit";
    }

    /**
     * 保存${functionName}
     */
    @RequiresPermissions("${permissionPrefix}:save")
    @Log(title = "${functionName}", businessType = BusinessType.SAVE)
    @PostMapping("/save")
    @ResponseBody
    public AjaxResult saveOrUpdate(HttpServletRequest request) {
        return toAjax(${className}Service.save${ClassName}(request));
    }

#if($table.crud)
    /**
     * 删除${functionName}
     */
    @RequiresPermissions("${permissionPrefix}:remove")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @PostMapping( "/remove")
    @ResponseBody
    public AjaxResult remove(String ids) {
        return toAjax(${className}Service.delete${ClassName}ByIds(ids));
    }
#elseif($table.tree)
    /**
     * 删除
     */
    @RequiresPermissions("${permissionPrefix}:remove")
    @Log(title = "${functionName}", businessType = BusinessType.DELETE)
    @GetMapping("/remove/{${pkColumn.javaField}}")
    @ResponseBody
    public AjaxResult remove(@PathVariable("${pkColumn.javaField}") ${pkColumn.javaType} ${pkColumn.javaField}) {
        return toAjax(${className}Service.delete${ClassName}ById(${pkColumn.javaField}));
    }
#end
#if($table.tree)

    /**
     * 选择${functionName}树
     */
#set($BusinessName=$businessName.substring(0,1).toUpperCase() + ${businessName.substring(1)})
    @GetMapping(value = { "/select${BusinessName}Tree/{${pkColumn.javaField}}", "/select${BusinessName}Tree/" })
    public String select${BusinessName}Tree(@PathVariable(value = "${pkColumn.javaField}", required = false) Long ${pkColumn.javaField}, ModelMap mmap) {
        if (StringUtils.isNotNull(${pkColumn.javaField})) {
            mmap.put("${className}", ${className}Service.select${ClassName}ById(${pkColumn.javaField}));
        }
        return prefix + "/tree";
    }

    /**
     * 加载${functionName}树列表
     */
    @GetMapping("/treeData")
    @ResponseBody
    public List<Ztree> treeData() {
        List<Ztree> ztrees = ${className}Service.select${ClassName}Tree();
        return ztrees;
    }
#end
}
