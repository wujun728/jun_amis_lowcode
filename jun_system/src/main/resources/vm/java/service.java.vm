package ${packageName}.${businessName}.service;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import cn.hutool.core.util.StrUtil;
import javax.servlet.http.HttpServletRequest;
import org.springframework.stereotype.Service;
import com.ruoyi.common.utils.RequestUtil;
import com.ruoyi.common.utils.security.ShiroUtils;
import com.ruoyi.common.utils.sql.SqlUtil;
import com.ruoyi.framework.web.page.TableDataInfo;
import com.ruoyi.project.common.CommonService;
#if($table.tree)
import com.ruoyi.framework.web.domain.Ztree;
#end

/**
 * ${functionName}服务类
 * @author ${author}
 * @date ${datetime}
 */
@Service
public class ${ClassName}Service extends CommonService {

    /**
     * 查询${functionName}列表
     * @param request HttpServletRequest对象
     * @param pagination 是否分页查询
     * @return ${functionName}集合
     */
    public TableDataInfo select${ClassName}List(HttpServletRequest request, boolean pagination) {
#foreach($column in $columns)
#if($column.query)
#if($column.queryType == "BETWEEN")
        String start_time = RequestUtil.getValue(request, "start_time");
        String end_time = RequestUtil.getValue(request, "end_time");
#else
        String $column.columnName = RequestUtil.getValue(request, "$column.columnName");//$column.columnComment
#end
#end
#end
        String sortName = RequestUtil.getValue(request, "orderByColumn");
        String isAsc = RequestUtil.getValue(request, "isAsc");

        List<String> paramList = new ArrayList<String>();
        StringBuffer sql = new StringBuffer();
        sql.append("select#foreach($column in $columns) $column.columnName#if($velocityCount != $columns.size()),#end#end from ${tableName} a where 1 = 1 ");

#foreach($column in $columns)
#set($queryType=$column.queryType)
#if($column.query)
#if($column.queryType == "EQ")
        if(StrUtil.isNotBlank($column.columnName)) {
            sql.append(" and a.$column.columnName = ? ");
            paramList.add($column.columnName);
        }
#elseif($queryType == "NE")
        if(StrUtil.isNotBlank($column.columnName)) {
            sql.append(" and a.$column.columnName != ? ");
            paramList.add($column.columnName);
        }
#elseif($queryType == "GT")
        if(StrUtil.isNotBlank($column.columnName)) {
            sql.append(" and a.$column.columnName > ? ");
            paramList.add($column.columnName);
        }
#elseif($queryType == "GTE")
        if(StrUtil.isNotBlank($column.columnName)) {
            sql.append(" and a.$column.columnName >= ? ");
            paramList.add($column.columnName);
        }
#elseif($queryType == "LT")
        if(StrUtil.isNotBlank($column.columnName)) {
            sql.append(" and a.$column.columnName < ? ");
            paramList.add($column.columnName);
        }
#elseif($queryType == "LTE")
        if(StrUtil.isNotBlank($column.columnName)) {
            sql.append(" and a.$column.columnName <= ? ");
            paramList.add($column.columnName);
        }
#elseif($queryType == "LIKE")
        if(StrUtil.isNotBlank($column.columnName)) {
            sql.append(" and a.$column.columnName like concat('%', ?, '%') ");
            paramList.add($column.columnName);
        }
#elseif($queryType == "BETWEEN")
        if(StrUtil.isNotBlank(start_time)) {
            sql.append(" and date_format(a.$column.columnName,'%y%m%d') >= date_format(?,'%y%m%d') ");
            paramList.add(start_time);
        }
        if(StrUtil.isNotBlank(end_time)) {
            sql.append(" and date_format(a.$column.columnName,'%y%m%d') <= date_format(?,'%y%m%d') ");
            paramList.add(end_time);
        }
#end
#end
#end

        if(StrUtil.isNotBlank(sortName)) {
            sql.append(" order by "+sortName+" "+isAsc);
        }
        else {//默认排序字段待完善
            //sql.append(" order by r.role_sort");
        }
        return this.getRespTableDataInfo(request, sql.toString(), paramList, pagination);
    }

    /**
     * 查询${functionName}
     * @param ${pkColumn.columnName} ${functionName}ID
     * @return ${functionName}
     */
    public Map<String, Object> select${ClassName}ById(String ${pkColumn.columnName}) {
        String sql = "select#foreach($column in $columns) $column.columnName#if($velocityCount != $columns.size()),#end#end from ${tableName} a where ${pkColumn.columnName} = ?";
        return db.queryForMap(sql, new Object[]{${pkColumn.columnName}});
    }

    /**
     * 保存${functionName}
     * @param request
     * @return 结果
     */
    public int save${ClassName}(HttpServletRequest request) {
        String operator_id = ShiroUtils.getLoginName();
        String $pkColumn.columnName = RequestUtil.getValue(request, "$pkColumn.columnName");
#set($insertColumns="")
#set($insertComas="")
#set($insertValues="")
#set($updateColumns="")
#set($updateValues="")
#foreach($column in $columns)
#if(($column.insert || $column.edit) && $column.columnName != "create_by" && $column.columnName != "create_time" && $column.columnName != "update_by" && $column.columnName != "update_time")
        String $column.columnName = RequestUtil.getValue(request, "$column.columnName");//$column.columnComment
#end
#if($column.insert)
#set($insertColumns=$insertColumns+$column.columnName+",")
#if($column.columnName == "create_by")
#set($insertComas=$insertComas+"?,")
#set($insertValues=$insertValues+"operator_id,")
#elseif($column.columnName == "create_time")
#set($insertComas=$insertComas+"sysdate(),")
#else
#set($insertComas=$insertComas+"?,")
#set($insertValues=$insertValues+$column.columnName+",")
#end
#end
#if($column.edit)
#if($column.columnName == "update_by")
#set($updateColumns=$updateColumns+$column.columnName+" = ?,")
#set($updateValues=$updateValues+"operator_id,")
#elseif($column.columnName == "update_time")
#set($updateColumns=$updateColumns+$column.columnName+" = sysdate(),")
#else
#set($updateColumns=$updateColumns+$column.columnName+" = ?,")
#set($updateValues=$updateValues+$column.columnName+",")
#end
#end
#end
#set($insertColumns=$insertColumns.substring(0,$insertColumns.lastIndexOf(',')))
#set($insertComas=$insertComas.substring(0,$insertComas.lastIndexOf(',')))
#set($insertValues=$insertValues.substring(0,$insertValues.lastIndexOf(',')))
#set($updateColumns=$updateColumns.substring(0,$updateColumns.lastIndexOf(',')))
#set($updateValues=$updateValues.substring(0,$updateValues.lastIndexOf(',')))

        if(StrUtil.isNotBlank($pkColumn.columnName)) {
            String sql = "update ${tableName} a "+
                    "   set $updateColumns " +
                    " where $pkColumn.columnName = ?";
            return db.execute(sql, new Object[]{$updateValues,$pkColumn.columnName});
        }

        String sql = "insert into ${tableName}($insertColumns) " +
                "values($insertComas)";
        return db.execute(sql, new Object[]{$insertValues});
    }

    /**
     * 批量删除${functionName}
     * @param ids 需要删除的数据ID
     * @return 结果
     */
    public int delete${ClassName}ByIds(String ids) {
        List<String> paramList = new ArrayList<String>();
        String sql = "delete from ${tableName} where $pkColumn.columnName in ("+SqlUtil.rebuildInSql(ids, paramList)+")";
        return db.execute(sql, paramList.toArray());
    }

#if($table.tree)

    /**
     * 查询${functionName}树列表
     * @return 所有${functionName}信息
     */
    public List<Ztree> select${ClassName}Tree();
#end
}
